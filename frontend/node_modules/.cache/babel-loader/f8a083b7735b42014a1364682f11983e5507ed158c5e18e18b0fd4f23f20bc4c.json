{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nexport const useBats = () => {\n  _s();\n  const [bats, setBats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBats = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch bat models with their variants and prices\n        const {\n          data: batModels,\n          error: modelsError\n        } = await supabase.from('bat_models').select(`\n            *,\n            bat_variants (\n              *,\n              prices (\n                *,\n                retailers (name)\n              )\n            )\n          `);\n        if (modelsError) throw modelsError;\n\n        // Transform data and filter out incomplete bats\n        const transformedBats = batModels.map(model => {\n          // Only include variants that have pricing data\n          const validVariants = model.bat_variants.filter(variant => variant.prices && variant.prices.length > 0).map(variant => {\n            // Group prices by retailer\n            const priceObj = {\n              amazon: 0,\n              dicks: 0,\n              justbats: 0\n            };\n            const stockObj = {\n              amazon: false,\n              dicks: false,\n              justbats: false\n            };\n            variant.prices.forEach(price => {\n              const retailerName = price.retailers.name.toLowerCase();\n              if (retailerName.includes('amazon')) {\n                priceObj.amazon = price.price;\n                stockObj.amazon = price.in_stock;\n              } else if (retailerName.includes('dick')) {\n                priceObj.dicks = price.price;\n                stockObj.dicks = price.in_stock;\n              } else if (retailerName.includes('justbats')) {\n                priceObj.justbats = price.price;\n                stockObj.justbats = price.in_stock;\n              }\n            });\n            return {\n              length: variant.length,\n              drop: variant.drop,\n              price: priceObj,\n              stock: stockObj\n            };\n          });\n\n          // Only return bat models that have at least one valid variant\n          if (validVariants.length === 0) {\n            return null;\n          }\n          return {\n            id: model.id,\n            brand: model.brand,\n            series: model.series,\n            year: model.year,\n            modelNumber: model.model_number || model.id.toString(),\n            swingWeight: model.swing_weight,\n            certification: model.certification,\n            material: model.material,\n            construction: model.construction,\n            barrelSize: model.barrel_size,\n            image: model.image_url || `https://via.placeholder.com/200x300/1F2937/60A5FA?text=${encodeURIComponent(model.series)}`,\n            // Retailer URLs for affiliate tracking\n            amazon_affiliate_url: model.amazon_product_url,\n            justbats_product_url: model.justbats_product_url,\n            dicks_product_url: model.dicks_product_url,\n            variants: validVariants,\n            rating: model.rating || 4.0,\n            reviews: model.review_count || 0\n          };\n        }).filter(bat => bat !== null); // Remove null entries (bats with no valid variants)\n\n        setBats(transformedBats);\n      } catch (err) {\n        setError(err.message);\n        console.error('Error fetching bats:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBats();\n  }, []);\n  return {\n    bats,\n    loading,\n    error\n  };\n};\n_s(useBats, \"+tjwY8Z/yEtO+hvaZq4cjJMN2p8=\");","map":{"version":3,"names":["useState","useEffect","supabase","useBats","_s","bats","setBats","loading","setLoading","error","setError","fetchBats","data","batModels","modelsError","from","select","transformedBats","map","model","validVariants","bat_variants","filter","variant","prices","length","priceObj","amazon","dicks","justbats","stockObj","forEach","price","retailerName","retailers","name","toLowerCase","includes","in_stock","drop","stock","id","brand","series","year","modelNumber","model_number","toString","swingWeight","swing_weight","certification","material","construction","barrelSize","barrel_size","image","image_url","encodeURIComponent","amazon_affiliate_url","amazon_product_url","justbats_product_url","dicks_product_url","variants","rating","reviews","review_count","bat","err","message","console"],"sources":["/Users/aaronbarrows/Desktop/bat-price-tracker/frontend/src/useBats.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\n\nexport const useBats = () => {\n  const [bats, setBats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchBats = async () => {\n      try {\n        setLoading(true);\n        \n        // Fetch bat models with their variants and prices\n        const { data: batModels, error: modelsError } = await supabase\n          .from('bat_models')\n          .select(`\n            *,\n            bat_variants (\n              *,\n              prices (\n                *,\n                retailers (name)\n              )\n            )\n          `);\n\n        if (modelsError) throw modelsError;\n\n        // Transform data and filter out incomplete bats\n        const transformedBats = batModels\n          .map(model => {\n            // Only include variants that have pricing data\n            const validVariants = model.bat_variants\n              .filter(variant => variant.prices && variant.prices.length > 0)\n              .map(variant => {\n                // Group prices by retailer\n                const priceObj = { amazon: 0, dicks: 0, justbats: 0 };\n                const stockObj = { amazon: false, dicks: false, justbats: false };\n                \n                variant.prices.forEach(price => {\n                  const retailerName = price.retailers.name.toLowerCase();\n                  if (retailerName.includes('amazon')) {\n                    priceObj.amazon = price.price;\n                    stockObj.amazon = price.in_stock;\n                  } else if (retailerName.includes('dick')) {\n                    priceObj.dicks = price.price;\n                    stockObj.dicks = price.in_stock;\n                  } else if (retailerName.includes('justbats')) {\n                    priceObj.justbats = price.price;\n                    stockObj.justbats = price.in_stock;\n                  }\n                });\n\n                return {\n                  length: variant.length,\n                  drop: variant.drop,\n                  price: priceObj,\n                  stock: stockObj\n                };\n              });\n\n            // Only return bat models that have at least one valid variant\n            if (validVariants.length === 0) {\n              return null;\n            }\n\n            return {\n              id: model.id,\n              brand: model.brand,\n              series: model.series,\n              year: model.year,\n              modelNumber: model.model_number || model.id.toString(),\n              swingWeight: model.swing_weight,\n              certification: model.certification,\n              material: model.material,\n              construction: model.construction,\n              barrelSize: model.barrel_size,\n              image: model.image_url || `https://via.placeholder.com/200x300/1F2937/60A5FA?text=${encodeURIComponent(model.series)}`,\n              // Retailer URLs for affiliate tracking\n              amazon_affiliate_url: model.amazon_product_url,\n              justbats_product_url: model.justbats_product_url,\n              dicks_product_url: model.dicks_product_url,\n              variants: validVariants,\n              rating: model.rating || 4.0,\n              reviews: model.review_count || 0\n            };\n          })\n          .filter(bat => bat !== null); // Remove null entries (bats with no valid variants)\n\n        setBats(transformedBats);\n      } catch (err) {\n        setError(err.message);\n        console.error('Error fetching bats:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBats();\n  }, []);\n\n  return { bats, loading, error };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAM;UAAEI,IAAI,EAAEC,SAAS;UAAEJ,KAAK,EAAEK;QAAY,CAAC,GAAG,MAAMZ,QAAQ,CAC3Da,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,CAAC;QAEJ,IAAIF,WAAW,EAAE,MAAMA,WAAW;;QAElC;QACA,MAAMG,eAAe,GAAGJ,SAAS,CAC9BK,GAAG,CAACC,KAAK,IAAI;UACZ;UACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,YAAY,CACrCC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,MAAM,IAAID,OAAO,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAC9DP,GAAG,CAACK,OAAO,IAAI;YACd;YACA,MAAMG,QAAQ,GAAG;cAAEC,MAAM,EAAE,CAAC;cAAEC,KAAK,EAAE,CAAC;cAAEC,QAAQ,EAAE;YAAE,CAAC;YACrD,MAAMC,QAAQ,GAAG;cAAEH,MAAM,EAAE,KAAK;cAAEC,KAAK,EAAE,KAAK;cAAEC,QAAQ,EAAE;YAAM,CAAC;YAEjEN,OAAO,CAACC,MAAM,CAACO,OAAO,CAACC,KAAK,IAAI;cAC9B,MAAMC,YAAY,GAAGD,KAAK,CAACE,SAAS,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC;cACvD,IAAIH,YAAY,CAACI,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACnCX,QAAQ,CAACC,MAAM,GAAGK,KAAK,CAACA,KAAK;gBAC7BF,QAAQ,CAACH,MAAM,GAAGK,KAAK,CAACM,QAAQ;cAClC,CAAC,MAAM,IAAIL,YAAY,CAACI,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACxCX,QAAQ,CAACE,KAAK,GAAGI,KAAK,CAACA,KAAK;gBAC5BF,QAAQ,CAACF,KAAK,GAAGI,KAAK,CAACM,QAAQ;cACjC,CAAC,MAAM,IAAIL,YAAY,CAACI,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC5CX,QAAQ,CAACG,QAAQ,GAAGG,KAAK,CAACA,KAAK;gBAC/BF,QAAQ,CAACD,QAAQ,GAAGG,KAAK,CAACM,QAAQ;cACpC;YACF,CAAC,CAAC;YAEF,OAAO;cACLb,MAAM,EAAEF,OAAO,CAACE,MAAM;cACtBc,IAAI,EAAEhB,OAAO,CAACgB,IAAI;cAClBP,KAAK,EAAEN,QAAQ;cACfc,KAAK,EAAEV;YACT,CAAC;UACH,CAAC,CAAC;;UAEJ;UACA,IAAIV,aAAa,CAACK,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,IAAI;UACb;UAEA,OAAO;YACLgB,EAAE,EAAEtB,KAAK,CAACsB,EAAE;YACZC,KAAK,EAAEvB,KAAK,CAACuB,KAAK;YAClBC,MAAM,EAAExB,KAAK,CAACwB,MAAM;YACpBC,IAAI,EAAEzB,KAAK,CAACyB,IAAI;YAChBC,WAAW,EAAE1B,KAAK,CAAC2B,YAAY,IAAI3B,KAAK,CAACsB,EAAE,CAACM,QAAQ,CAAC,CAAC;YACtDC,WAAW,EAAE7B,KAAK,CAAC8B,YAAY;YAC/BC,aAAa,EAAE/B,KAAK,CAAC+B,aAAa;YAClCC,QAAQ,EAAEhC,KAAK,CAACgC,QAAQ;YACxBC,YAAY,EAAEjC,KAAK,CAACiC,YAAY;YAChCC,UAAU,EAAElC,KAAK,CAACmC,WAAW;YAC7BC,KAAK,EAAEpC,KAAK,CAACqC,SAAS,IAAI,0DAA0DC,kBAAkB,CAACtC,KAAK,CAACwB,MAAM,CAAC,EAAE;YACtH;YACAe,oBAAoB,EAAEvC,KAAK,CAACwC,kBAAkB;YAC9CC,oBAAoB,EAAEzC,KAAK,CAACyC,oBAAoB;YAChDC,iBAAiB,EAAE1C,KAAK,CAAC0C,iBAAiB;YAC1CC,QAAQ,EAAE1C,aAAa;YACvB2C,MAAM,EAAE5C,KAAK,CAAC4C,MAAM,IAAI,GAAG;YAC3BC,OAAO,EAAE7C,KAAK,CAAC8C,YAAY,IAAI;UACjC,CAAC;QACH,CAAC,CAAC,CACD3C,MAAM,CAAC4C,GAAG,IAAIA,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;;QAEhC5D,OAAO,CAACW,eAAe,CAAC;MAC1B,CAAC,CAAC,OAAOkD,GAAG,EAAE;QACZzD,QAAQ,CAACyD,GAAG,CAACC,OAAO,CAAC;QACrBC,OAAO,CAAC5D,KAAK,CAAC,sBAAsB,EAAE0D,GAAG,CAAC;MAC5C,CAAC,SAAS;QACR3D,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CApGWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}